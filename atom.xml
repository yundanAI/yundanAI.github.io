<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qingyun的个人博客</title>
  
  
  <link href="http://wxm.fit/atom.xml" rel="self"/>
  
  <link href="http://wxm.fit/"/>
  <updated>2022-01-11T11:48:13.400Z</updated>
  <id>http://wxm.fit/</id>
  
  <author>
    <name>王向明</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo博客搭建相册</title>
    <link href="http://wxm.fit/posts/4bce659f/"/>
    <id>http://wxm.fit/posts/4bce659f/</id>
    <published>2022-01-11T08:44:17.000Z</published>
    <updated>2022-01-11T11:48:13.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适应环境"><a href="#适应环境" class="headerlink" title="适应环境"></a>适应环境</h2><p>本文适用于 Hexo 5.4.0 / NexT 8.3.0，用来搭建瀑布流相册功能</p><span id="more"></span> <h2 id="一、获取图片信息"><a href="#一、获取图片信息" class="headerlink" title="一、获取图片信息"></a>一、获取图片信息</h2><p>在博客根目录的 <code>/scripts/</code> 文件夹下新建一个 <code>phototool.js</code> 文件，内容如下。主要功能是访问照片文件夹，获取每张照片的大小和文件名，并生成对应的 <code>json</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sizeOf = <span class="built_in">require</span>(<span class="string">&#x27;image-size&#x27;</span>);</span><br><span class="line"><span class="comment">//本地照片所在目录</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="string">&quot;source/photos/images&quot;</span>; </span><br><span class="line"><span class="comment">//要放置生成的照片信息文件目录，建议直接放在 source/photos/ 文件夹下</span></span><br><span class="line"><span class="keyword">const</span> output = <span class="string">&quot;source/photos/photoslist.json&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> dimensions;</span><br><span class="line">fs.readdir(path, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == files.length) &#123;</span><br><span class="line">            fs.writeFileSync(output, <span class="built_in">JSON</span>.stringify(arr, <span class="literal">null</span>, <span class="string">&quot;\t&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.stat(path + <span class="string">&quot;/&quot;</span> + files[index], <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stats.isFile()) &#123;</span><br><span class="line">                dimensions = sizeOf(path + <span class="string">&quot;/&quot;</span> + files[index]);</span><br><span class="line">                <span class="built_in">console</span>.log(dimensions.width, dimensions.height);</span><br><span class="line">                arr.push(dimensions.width + <span class="string">&#x27;.&#x27;</span> + dimensions.height + <span class="string">&#x27; &#x27;</span> + files[index]);</span><br><span class="line">            &#125;</span><br><span class="line">            iterator(index + <span class="number">1</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;(<span class="number">0</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>json文件样例如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="string">&quot;4032.3024 IMG_0391.JPG&quot;</span>,</span><br><span class="line"><span class="string">&quot;12500.3874 IMG_0404.JPG&quot;</span>,</span><br><span class="line"><span class="string">&quot;4032.3024 IMG_0416.JPG&quot;</span>,</span><br><span class="line"><span class="string">&quot;4032.3024 IMG_0424.JPG&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="二、js加载图像显示"><a href="#二、js加载图像显示" class="headerlink" title="二、js加载图像显示"></a>二、js加载图像显示</h2><p>在 <code>/source/js/</code> 目录下创建 <code>photo.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imgDataPath = <span class="string">&#x27;/photos/photoslist.json&#x27;</span>; <span class="comment">//图片名称高宽信息json文件路径</span></span><br><span class="line"><span class="keyword">var</span> imgPath = <span class="string">&#x27;/images/photos/&#x27;</span>;  <span class="comment">//图片访问路径</span></span><br><span class="line"><span class="keyword">var</span> imgMaxNum = <span class="number">50</span>; <span class="comment">//图片显示数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> windowWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">|| <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">|| <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"><span class="keyword">if</span> (windowWidth &lt; <span class="number">768</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> imageWidth = <span class="number">145</span>; <span class="comment">//图片显示宽度(手机端)</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> imageWidth = <span class="number">215</span>; <span class="comment">//图片显示宽度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">photo = &#123;</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">offset</span>: imgMaxNum,</span><br><span class="line">    <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">        $.getJSON(imgDataPath, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            that.render(that.page, data);</span><br><span class="line">            <span class="comment">//that.scroll(data);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">page, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> begin = (page - <span class="number">1</span>) * <span class="built_in">this</span>.offset;</span><br><span class="line">        <span class="keyword">var</span> end = page * <span class="built_in">this</span>.offset;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt;= data.length) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> html, imgNameWithPattern, imgName, imageSize, imageX, imageY, li = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end &amp;&amp; i &lt; data.length; i++) &#123;</span><br><span class="line">           imgNameWithPattern = data[i].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">           imgName = imgNameWithPattern.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">           imageSize = data[i].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">           imageX = imageSize.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">           imageY = imageSize.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">            li += <span class="string">&#x27;&lt;div class=&quot;card&quot; style=&quot;width:&#x27;</span> + imageWidth + <span class="string">&#x27;px&quot; &gt;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&lt;div class=&quot;ImageInCard&quot; style=&quot;height:&#x27;</span>+ imageWidth * imageY / imageX + <span class="string">&#x27;px&quot;&gt;&#x27;</span> +</span><br><span class="line">                      <span class="string">&#x27;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;&#x27;</span> + imgPath + imgNameWithPattern + <span class="string">&#x27;&quot; data-caption=&quot;&#x27;</span> + imgName + <span class="string">&#x27;&quot; title=&quot;&#x27;</span> +  imgName + <span class="string">&#x27;&quot;&gt;&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;img data-src=&quot;&#x27;</span> + imgPath + imgNameWithPattern + <span class="string">&#x27; &quot; src=&quot;&#x27;</span> + imgPath + imgNameWithPattern + <span class="string">&#x27; &quot; data-loaded=&quot;true&quot;&gt;&#x27;</span> +</span><br><span class="line">                      <span class="string">&#x27;&lt;/a&gt;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">&quot;.ImageGrid&quot;</span>).append(li);</span><br><span class="line">        <span class="built_in">this</span>.minigrid();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">minigrid</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> grid = <span class="keyword">new</span> Minigrid(&#123;</span><br><span class="line">            <span class="attr">container</span>: <span class="string">&#x27;.ImageGrid&#x27;</span>,</span><br><span class="line">            <span class="attr">item</span>: <span class="string">&#x27;.card&#x27;</span>,</span><br><span class="line">            <span class="attr">gutter</span>: <span class="number">12</span></span><br><span class="line">        &#125;);</span><br><span class="line">        grid.mount();</span><br><span class="line">        $(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           grid.mount();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">photo.init();</span><br></pre></td></tr></table></figure><p>然后，在 <code>/source/_data/</code> 下创建 <code>body-end.swig</code> 文件，并添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.type ===&#x27;picture&#x27; %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/minigrid@3.1.1/dist/minigrid.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/photo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>因为这里利用到了主题注入功能，所以需要在<strong>主题配置文件</strong>启用该功能：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> custom_file_path:</span><br><span class="line">-  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">+  bodyEnd: source/_data/body-end.swig</span><br></pre></td></tr></table></figure><h2 id="三、相册页面设计"><a href="#三、相册页面设计" class="headerlink" title="三、相册页面设计"></a>三、相册页面设计</h2><p>新建相册页 <code>hexo new page photos</code>，创建 <code>/source/photos/index.md</code>，编辑为以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 相册</span><br><span class="line"><span class="attr">type</span>: picture</span><br><span class="line"><span class="attr">comments</span>: <span class="literal">true</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.ImageGrid</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">max-width</span>: <span class="number">1040px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.card</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">transition</span>: .<span class="number">3s</span> ease-in-out;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">padding</span>: <span class="number">1.4px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.ImageInCard</span> <span class="selector-tag">img</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.card</span> &#123;<span class="attribute">background-color</span>: <span class="number">#333</span>;&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ImageGrid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>不得不感叹大牛的历害之处。</p><p>耗时两天完成了博客的相册搭建，参考了无数的链接。</p><p>也许是配置的问题，也许是插件的问题。</p><p>博客界面几经崩溃，一次次的恢复还原，直到遇见这边大牛的博客，才完成了博客相册的搭建，也学到了不少js的操作。</p><p>祸兮福之所倚，福兮祸之所伏</p><p>参考链接：<a href="https://blog.dlzhang.com/post/31/">Hexo NexT 博客增加瀑布流相册页面</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;适应环境&quot;&gt;&lt;a href=&quot;#适应环境&quot; class=&quot;headerlink&quot; title=&quot;适应环境&quot;&gt;&lt;/a&gt;适应环境&lt;/h2&gt;&lt;p&gt;本文适用于 Hexo 5.4.0 / NexT 8.3.0，用来搭建瀑布流相册功能&lt;/p&gt;</summary>
    
    
    
    
    <category term="博客搭建" scheme="http://wxm.fit/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 234 题解</title>
    <link href="http://wxm.fit/posts/4bce670f/"/>
    <id>http://wxm.fit/posts/4bce670f/</id>
    <published>2022-01-09T06:16:26.000Z</published>
    <updated>2022-01-11T12:38:18.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、题目分数分布"><a href="#一、题目分数分布" class="headerlink" title="一、题目分数分布"></a>一、题目分数分布</h2><p><img src="/posts/4bce670f/$C@%60ZG%60%7DB0I%5DJPACIXNG4BQ-1641709239834.png" alt="img"></p><span id="more"></span><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><h3 id="A-Weird-Function"><a href="#A-Weird-Function" class="headerlink" title="A - Weird Function"></a><a href="https://atcoder.jp/contests/abc234/tasks/abc234_a">A - Weird Function</a></h3><p><img src="/posts/4bce670f/A%60MZGL59G2G$CQYDFC%7B%7DP-1641709400705.png" alt="img"></p><p><strong>题意如下：</strong></p><p>给定一个参数t和函数f(x) = x^2 + 2*x  + 3</p><p>求f ( f ( f ( t ) + t ) + f ( f ( t ) ) )的值。</p><p><strong>解法如下：</strong></p><p>构造函数f(x),根据题意代入t</p><p><strong>代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Author: QingYun</span></span><br><span class="line"><span class="comment">* @Date:   2022-01-08 19:59:31</span></span><br><span class="line"><span class="comment">* @Last Modified by: QingYun</span></span><br><span class="line"><span class="comment">* @Last Modified time: 2022-01-08 20:01:49</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios_base::sync_with_stdio(false), cin.tie(NULL)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="meta-string">&#x27; &#x27;</span> &lt;&lt; a &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n*n + <span class="number">2</span>*n + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="built_in">f</span>(<span class="built_in">f</span>(<span class="built_in">f</span>(t)+t)+<span class="built_in">f</span>(<span class="built_in">f</span>(t)));</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">以生命之火，向未来冲锋！</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>题目总结</strong></p><p>一道简单的思维签到题</p><h3 id="B-Longest-Segment"><a href="#B-Longest-Segment" class="headerlink" title="B - Longest Segment"></a><a href="https://atcoder.jp/contests/abc234/tasks/abc234_b">B - Longest Segment</a></h3><p><img src="/posts/4bce670f/H%7D%25SI_N3JEIB08%60W%7B%5B%7BCRE3-1641709680057.png" alt="img"></p><p><strong>题目大意：</strong></p><p>在二维平面上，给定100个点，求最远的两个点的距离是多少</p><p><strong>解题思路：</strong></p><p>由于数据范围比较小，可以直接枚举</p><p><strong>解题代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Author: QingYun</span></span><br><span class="line"><span class="comment">* @Date:   2022-01-08 19:59:38</span></span><br><span class="line"><span class="comment">* @Last Modified by: QingYun</span></span><br><span class="line"><span class="comment">* @Last Modified time: 2022-01-08 20:06:06</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios_base::sync_with_stdio(false), cin.tie(NULL)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="meta-string">&#x27; &#x27;</span> &lt;&lt; a &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x[<span class="number">105</span>],y[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> l = <span class="built_in">fabs</span>(x[i] - x[j]);</span><br><span class="line"><span class="keyword">double</span> r = <span class="built_in">fabs</span>(y[i] - y[j]);</span><br><span class="line">l *= l,r *= r;</span><br><span class="line"><span class="keyword">double</span> sum = l+r;</span><br><span class="line">sum = <span class="built_in">sqrt</span>(sum);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j &lt;= n;++j) &#123;</span><br><span class="line"><span class="keyword">double</span> tmp = <span class="built_in">get_dis</span>(i,j);</span><br><span class="line">ans = <span class="built_in">max</span>(ans,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">以生命之火，向未来冲锋！</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>题目总结</strong></p><p>枚举简单思维题</p><h3 id="C-Happy-New-Year"><a href="#C-Happy-New-Year" class="headerlink" title="C - Happy New Year!"></a><a href="https://atcoder.jp/contests/abc234/tasks/abc234_c">C - Happy New Year!</a></h3><p><img src="/posts/4bce670f/%5D%7DUVY8IE81%60WZ1IY47%60DBBB-1641709846160.png" alt="img"></p><p><strong>题目大意：</strong></p><p>求一个数的二进制数</p><p><strong>解题思路：</strong></p><p>将数字转化为二进制，将1对应的位置改为2</p><p><strong>解题代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Author: QingYun</span></span><br><span class="line"><span class="comment">* @Date:   2022-01-08 20:07:41</span></span><br><span class="line"><span class="comment">* @Last Modified by: QingYun</span></span><br><span class="line"><span class="comment">* @Last Modified time: 2022-01-08 20:09:11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios_base::sync_with_stdio(false), cin.tie(NULL)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="meta-string">&#x27; &#x27;</span> &lt;&lt; a &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL k;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line">string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(k &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> t = k % <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">1</span>) ans += <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> ans += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">k /= <span class="number">2</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">以生命之火，向未来冲锋！</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>题目总结：</strong></p><p>简单思维题</p><h3 id="D-Prefix-K-th-Max"><a href="#D-Prefix-K-th-Max" class="headerlink" title="D - Prefix K-th Max"></a><a href="https://atcoder.jp/contests/abc234/tasks/abc234_d">D - Prefix K-th Max</a></h3><p><img src="/posts/4bce670f/QQ%E5%9B%BE%E7%89%8720220109143419-1641710079233.png" alt="QQ图片20220109143419"></p><p><strong>题目大意</strong></p><p>从第k个到第n个，求每种情况下的第k大值</p><p><strong>解题思路</strong></p><p>使用set集合存入前k个数，从第k个数开始，存一个数，取一个数</p><p>set集合的最小值就是前n’位的第k大值</p><p><strong>解题代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Author: QingYun</span></span><br><span class="line"><span class="comment">* @Date:   2022-01-08 20:11:41</span></span><br><span class="line"><span class="comment">* @Last Modified by: QingYun</span></span><br><span class="line"><span class="comment">* @Last Modified time: 2022-01-08 20:16:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios_base::sync_with_stdio(false), cin.tie(NULL)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="meta-string">&#x27; &#x27;</span> &lt;&lt; a &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line">    set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;++i) s.<span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="keyword">int</span> ans = *s.<span class="built_in">begin</span>();</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k+<span class="number">1</span>;i &lt;= n;++i) &#123;</span><br><span class="line">s.<span class="built_in">insert</span>(a[i]);</span><br><span class="line">ans = *s.<span class="built_in">begin</span>();</span><br><span class="line">s.<span class="built_in">erase</span>(ans);</span><br><span class="line">ans = *s.<span class="built_in">begin</span>();</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">以生命之火，向未来冲锋！</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>题目总结：</strong></p><p>一个set集合的基本使用题型，适合用来训练STL</p><h3 id="E-Arithmetic-Number"><a href="#E-Arithmetic-Number" class="headerlink" title="E - Arithmetic Number"></a><a href="https://atcoder.jp/contests/abc234/tasks/abc234_e">E - Arithmetic Number</a></h3><p><img src="/posts/4bce670f/QQ%E5%9B%BE%E7%89%8720220109185509-1641725723890.png" alt="QQ图片20220109185509"></p><p><strong>题目大意：</strong></p><p>给定一个n，求大于等于n的最小数字x,</p><p>x满足（第d位-第d-1位）=（第d-1位-第d-2位）= ······</p><p><strong>解题思路：</strong></p><p>枚举所有可能，存入set集合</p><p>找到更好大于等于n的第一个数字</p><p><strong>解题代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Author: QingYun</span></span><br><span class="line"><span class="comment">* @Date:   2022-01-08 20:20:33</span></span><br><span class="line"><span class="comment">* @Last Modified by: QingYun</span></span><br><span class="line"><span class="comment">* @Last Modified time: 2022-01-08 20:44:58</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios_base::sync_with_stdio(false), cin.tie(NULL)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="meta-string">&#x27; &#x27;</span> &lt;&lt; a &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line">set&lt;string&gt; s1;</span><br><span class="line">string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> pre;</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="comment">// bool si;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i) &#123;</span><br><span class="line">    tmp = s[<span class="number">0</span>];</span><br><span class="line">    pre = s[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// si = true;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; len;++j) &#123;</span><br><span class="line">    pre += i;</span><br><span class="line">    <span class="keyword">if</span>(pre &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// if(si &amp;&amp; pre &lt; s[j]) break;</span></span><br><span class="line">    <span class="comment">// if(pre &gt; s[j]) si = false;</span></span><br><span class="line">    tmp += pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in"><span class="keyword">int</span></span>(tmp.<span class="built_in">size</span>()) == len)</span><br><span class="line">    s1.<span class="built_in">insert</span>(tmp);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; tmp &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;++i) &#123;</span><br><span class="line">    tmp = s[<span class="number">0</span>];</span><br><span class="line">    pre = s[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// si = true;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; len;++j) &#123;</span><br><span class="line">    pre -= i;</span><br><span class="line">    <span class="keyword">if</span>(pre &lt; <span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// if(si &amp;&amp; pre &lt; s[j]) break;</span></span><br><span class="line">    <span class="comment">// if(pre &gt; s[j]) si = false;</span></span><br><span class="line">    tmp += pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in"><span class="keyword">int</span></span>(tmp.<span class="built_in">size</span>()) == len)</span><br><span class="line">    s1.<span class="built_in">insert</span>(tmp);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; tmp &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> m = n % <span class="number">10</span>;</span><br><span class="line">    s = <span class="built_in"><span class="keyword">char</span></span>(m+<span class="string">&#x27;0&#x27;</span>) + s;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    s1.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">dfs</span>();</span><br><span class="line">    <span class="comment">// s[0] += 1;</span></span><br><span class="line">    <span class="comment">// dfs();</span></span><br><span class="line">    string cm = s;</span><br><span class="line">    s[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>();</span><br><span class="line">    </span><br><span class="line">    string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x: s1) &#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= cm) &#123;</span><br><span class="line">    ans = x;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">以生命之火，向未来冲锋！</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>题目总结：</strong></p><p>看清楚题目要求，认真分析，大胆猜测，小心验证，这很重要。</p><h3 id="F-Reordering"><a href="#F-Reordering" class="headerlink" title="F - Reordering"></a><a href="https://atcoder.jp/contests/abc234/tasks/abc234_f">F - Reordering</a></h3><p><img src="/posts/4bce670f/QQ%E5%9B%BE%E7%89%8720220109185934-1641725986914.png" alt="QQ图片20220109185934"></p><p><strong>题目大意</strong></p><p>给定一个字符串，求这个字符串取任意个数的字符排列组合，</p><p>一共有多少种不同的可能</p><p><strong>解题思路</strong></p><p>咱不清楚，就是copy雨神</p><p><strong>解题代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Author: QingYun</span></span><br><span class="line"><span class="comment">* @Date:   2022-01-08 20:45:03</span></span><br><span class="line"><span class="comment">* @Last Modified by: QingYun</span></span><br><span class="line"><span class="comment">* @Last Modified time: 2022-01-08 22:26:08</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N5000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A26</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MD998244353</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vv[N + <span class="number">1</span>], ff[N + <span class="number">1</span>], gg[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">ff[<span class="number">0</span>] = gg[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">vv[i] = i == <span class="number">1</span> ? <span class="number">1</span> : (<span class="keyword">long</span> <span class="keyword">long</span>) vv[i - MD % i] * (MD / i + <span class="number">1</span>) % MD;</span><br><span class="line">ff[i] = (<span class="keyword">long</span> <span class="keyword">long</span>) ff[i - <span class="number">1</span>] * i % MD;</span><br><span class="line">gg[i] = (<span class="keyword">long</span> <span class="keyword">long</span>) gg[i - <span class="number">1</span>] * vv[i] % MD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> cc[N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> kk[A], dp[N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n, i, j, a, ans;</span><br><span class="line"></span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, cc), n = <span class="built_in">strlen</span>(cc);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">kk[cc[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; A; a++)</span><br><span class="line"><span class="keyword">for</span> (i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">int</span> x = dp[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= kk[a]; j++)</span><br><span class="line">dp[i + j] = (dp[i + j] + (<span class="keyword">long</span> <span class="keyword">long</span>) x * gg[j]) % MD;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">ans = (ans + (<span class="keyword">long</span> <span class="keyword">long</span>) dp[i] * ff[i]) % MD;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>题目总结:</strong></p><p>非常值得研究的一个题目</p><h2 id="三、比赛反思"><a href="#三、比赛反思" class="headerlink" title="三、比赛反思"></a>三、比赛反思</h2><p>做题最重要的就是精气神三合一，</p><p>认真读题、大胆猜测、小心验证、码代码的时候模块化是一个非常不错的方法</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、题目分数分布&quot;&gt;&lt;a href=&quot;#一、题目分数分布&quot; class=&quot;headerlink&quot; title=&quot;一、题目分数分布&quot;&gt;&lt;/a&gt;一、题目分数分布&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/posts/4bce670f/$C@%60ZG%60%7DB0I%5DJPACIXNG4BQ-1641709239834.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Atcoder" scheme="http://wxm.fit/categories/Atcoder/"/>
    
    <category term="abc234" scheme="http://wxm.fit/categories/Atcoder/abc234/"/>
    
    
    <category term="ACM" scheme="http://wxm.fit/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>回归分析及Python实现</title>
    <link href="http://wxm.fit/posts/774fca9d/"/>
    <id>http://wxm.fit/posts/774fca9d/</id>
    <published>2022-01-06T00:14:08.000Z</published>
    <updated>2022-01-11T12:31:14.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性回归的实现方式"><a href="#线性回归的实现方式" class="headerlink" title="线性回归的实现方式"></a>线性回归的实现方式</h2><ol><li>最小二乘法</li><li>梯度下降法</li></ol><span id="more"></span><h2 id="Python如何实现线性回归"><a href="#Python如何实现线性回归" class="headerlink" title="Python如何实现线性回归"></a>Python如何实现线性回归</h2><h3 id="1-最小二乘法curve-fit-函数"><a href="#1-最小二乘法curve-fit-函数" class="headerlink" title="1.最小二乘法curve_fit()函数"></a>1.最小二乘法curve_fit()函数</h3><p> curve_fit是使用非线性最小二乘法将函数f进行拟合，寻找到最优曲线.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.optimize.curve_fit（f，xdata，ydata，p0 = <span class="literal">None</span>，sigma = <span class="literal">None</span>，absolute_sigma = <span class="literal">False</span>，check_finite = <span class="literal">True</span>，bounds = -inf ，inf，method = <span class="literal">None</span>，jac = <span class="literal">None</span>，** kwargs）</span><br></pre></td></tr></table></figure><p>参数介绍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数</span></span><br><span class="line">f: 模型函数f（x，…）。它必须将自变量作为第一个参数，其余你需要求的参数都放后面</span><br><span class="line">xdata: 数组对象，测量数据的自变量。对于具有k个预测变量的函数，通常应为M长度序列或（k，M）形数组。</span><br><span class="line">ydata: 数组对象，相关数据，长度M array-标称。f(xdata, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">popt: 数组，参数的最佳值，以使的平方残差之和最小。f(xdata, *popt) - ydata</span><br><span class="line">pcov: 二维阵列，popt的估计协方差。对角线提供参数估计的方差。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>curve_fit()函数使用实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> leastsq          <span class="comment">#导入leastsq模块</span></span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> curve_fit        <span class="comment">#导入leastsq模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt             <span class="comment">#导入pyplot模块</span></span><br><span class="line"><span class="comment">#####  引用以下3句 在绘图显示中文时不会出现乱码  ####</span></span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x, p</span>):</span></span><br><span class="line">    <span class="comment">## 定义拟合函数 y=a*np.exp(-(x-b)**2/(2*c**2))</span></span><br><span class="line">    a, b, c = p</span><br><span class="line">    <span class="keyword">return</span> a*np.exp(-(x-b)**<span class="number">2</span>/(<span class="number">2</span>*c**<span class="number">2</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">residuals</span>(<span class="params">p, y, x</span>):</span></span><br><span class="line">    <span class="comment">#实验数据x, y和拟合函数之间的差，p为拟合需要找到的系数</span></span><br><span class="line">    <span class="keyword">return</span> y - func(x, p)</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>                           <span class="comment"># 真实数据的函数参数</span></span><br><span class="line">y0 = func(x, [a, b, c])                     <span class="comment"># 真实数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)                           <span class="comment"># 随机噪声种子</span></span><br><span class="line">y1 = y0 + <span class="number">0.02</span> * np.random.randn(<span class="built_in">len</span>(x))    <span class="comment"># 加入噪声之后的实验数据</span></span><br><span class="line">P0 = [<span class="number">2</span>, <span class="number">0.40</span>, <span class="number">0.2</span>]                         <span class="comment"># 第一次猜测的函数拟合参数</span></span><br><span class="line">result_fit1 = leastsq(residuals,P0,args=(y1,x))<span class="comment">#拟合函数</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;真实参数:&quot;</span>, a, b, c)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;leastsq方法拟合参数&quot;</span>, result_fit1[<span class="number">0</span>]) <span class="comment"># leastsq方法拟合参数拟合后的参数</span></span><br><span class="line">plt.plot(x, y0, label=<span class="string">&quot;真实数据&quot;</span>)            <span class="comment">#绘制真实数据</span></span><br><span class="line">plt.plot(x, y1,<span class="string">&quot;o&quot;</span>, label=<span class="string">&quot;带噪声的实验数据&quot;</span>) <span class="comment">#绘制带有噪声数据</span></span><br><span class="line">plt.plot(x, func(x, result_fit1[<span class="number">0</span>]), label=<span class="string">&quot;拟合数据&quot;</span>) <span class="comment">#绘制拟合结果</span></span><br><span class="line">plt.title(<span class="string">&#x27;leastsq方法拟合&#x27;</span>)                 <span class="comment">#添加标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)                             <span class="comment">#x轴名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)                             <span class="comment">#y轴名称</span></span><br><span class="line">plt.legend()                                <span class="comment">#添加图例</span></span><br><span class="line">plt.show()                                  <span class="comment">#显示图像</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">x, a, b, c</span>):</span>                      <span class="comment">#定义需要拟合的函数</span></span><br><span class="line">    <span class="keyword">return</span> a*np.exp(-(x-b)**<span class="number">2</span>/(<span class="number">2</span>*c**<span class="number">2</span>))</span><br><span class="line">popt, _ = curve_fit(func2, x, y1, p0=P0)    <span class="comment">#拟合函数</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;curve_fit方法拟合参数&quot;</span>,popt) <span class="comment"># curve_fit方法拟合参数拟合后的参数</span></span><br><span class="line">plt.plot(x, y0, label=<span class="string">&quot;真实数据&quot;</span>)           <span class="comment">#绘制真实数据</span></span><br><span class="line">plt.plot(x, y1,<span class="string">&quot;o&quot;</span>, label=<span class="string">&quot;带噪声的实验数据&quot;</span>) <span class="comment">#绘制带有噪声数据</span></span><br><span class="line">plt.plot(x, func2(x, popt[<span class="number">0</span>],popt[<span class="number">1</span>],popt[<span class="number">2</span>]), label=<span class="string">&quot;拟合数据&quot;</span>) <span class="comment">#绘制拟合结果</span></span><br><span class="line">plt.title(<span class="string">&#x27;curve_fit方法拟合&#x27;</span>)               <span class="comment">#添加标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)                             <span class="comment">#x轴名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)                             <span class="comment">#y轴名称</span></span><br><span class="line">plt.legend()                                <span class="comment">#添加图例</span></span><br><span class="line">plt.show()                                  <span class="comment">#显示图像</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220110190921376-1641812962396.png" alt="image-20220110190921376"></p><h2 id="2-梯度下降法例题"><a href="#2-梯度下降法例题" class="headerlink" title="2.梯度下降法例题"></a>2.梯度下降法例题</h2><p>梯度下降法的过程：</p><ol><li>随机生成目标参数</li><li>确认参数的学习率</li><li>选取迭代次数</li><li>不断更新目标参数以达到较优效果</li></ol><p>梯度下降法实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 梯度下降法</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.zeros(<span class="number">100</span>)</span><br><span class="line">y = np.zeros(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    x[i] = random.random()</span><br><span class="line">    y[i] = random.random() * <span class="number">0.2</span> - <span class="number">0.1</span> + x[i] * x[i] + x[i] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成系数，赋初值</span></span><br><span class="line">a1 = random.random()</span><br><span class="line">a2 = random.random()</span><br><span class="line">a3 = random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来画最终的线条</span></span><br><span class="line">h = np.zeros(<span class="number">100</span>)</span><br><span class="line">A = <span class="number">0.3</span>  <span class="comment"># 学习率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    sum_1, sum_2, sum_3 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="comment"># 计算对应的y[i]</span></span><br><span class="line">        h[i] = a1 + a2 * x[i] + a3 * x[i] * x[i]</span><br><span class="line">        <span class="comment"># 计算差值</span></span><br><span class="line">        sum_1 += (h[i] - y[i])</span><br><span class="line">        sum_2 += (h[i] - y[i]) * x[i]</span><br><span class="line">        sum_3 += (h[i] - y[i]) * x[i] * x[i]</span><br><span class="line">    <span class="comment"># 学习方法</span></span><br><span class="line">    a1 = a1 - A * (sum_1 / <span class="number">100</span>)</span><br><span class="line">    a2 = a2 - A * (sum_2 / <span class="number">100</span>)</span><br><span class="line">    a3 = a3 - A * (sum_3 / <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(a1, a2, a3)</span><br><span class="line">x1 = <span class="built_in">list</span>(x)</span><br><span class="line">x1 = <span class="built_in">sorted</span>(x1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    h[i] = a1 + a2 * x1[i] + a3 * x1[i] * x1[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line"><span class="comment"># print(h)</span></span><br><span class="line"><span class="comment"># print(type(x),type(h))</span></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x1, h, <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X = np.linspace(0,10,100)  # X轴坐标数据</span></span><br><span class="line"><span class="comment"># Y = X*X                   # Y轴坐标数据</span></span><br><span class="line"><span class="comment"># plt.plot(X,Y)</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220110190903023-1641812944246.png" alt="image-20220110190903023"></p><h2 id="实践内容"><a href="#实践内容" class="headerlink" title="实践内容"></a>实践内容</h2><h3 id="题目（原题目）"><a href="#题目（原题目）" class="headerlink" title="题目（原题目）"></a>题目（原题目）</h3><p><img src="/posts/774fca9d/1.png" alt="img"></p><p><img src="/posts/774fca9d/2.png" alt="img"></p><h3 id="二、解题步骤（思路-代码）"><a href="#二、解题步骤（思路-代码）" class="headerlink" title="二、解题步骤（思路 + 代码）"></a>二、解题步骤（思路 + 代码）</h3><p>思路：</p><ol><li>最小二乘法拟合函数  -&gt;   根据网上资料的查阅，我们发现curve_fit函数可以实现拟合线性函数、多项式函数、对数函数、幂函数等</li><li>梯度下降法：随机生成数据、随机生成参数、设置学习率0.3、设计函数迭代1000次完成函数拟合</li><li>选取了前两类样本的第一列和第四列数据进行学习</li></ol><p>代码如下：</p><p>一、1.拟合线性函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy as np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot as plt</span><br><span class="line">from scipy.optimize <span class="keyword">import</span> curve_fit</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">90</span>, <span class="number">110</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">170</span>, <span class="number">190</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">250</span>, <span class="number">270</span>, <span class="number">290</span>,</span><br><span class="line">     <span class="number">310</span>, <span class="number">330</span>, <span class="number">350</span>, <span class="number">370</span>, <span class="number">390</span>, <span class="number">410</span>, <span class="number">430</span>, <span class="number">450</span>, <span class="number">470</span>, <span class="number">490</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0.066</span>, <span class="number">0.088</span>, <span class="number">0.1539</span>, <span class="number">0.1979</span>, <span class="number">0.2419</span>, <span class="number">0.2639</span>, <span class="number">0.3079</span>, <span class="number">0.3299</span>,</span><br><span class="line">     <span class="number">0.3738</span>, <span class="number">0.3958</span>, <span class="number">0.4398</span>, <span class="number">0.4398</span>, <span class="number">0.4618</span>, <span class="number">0.4838</span>, <span class="number">0.5498</span>, <span class="number">0.5498</span>, <span class="number">0.5718</span>,</span><br><span class="line">     <span class="number">0.5938</span>, <span class="number">0.6158</span>, <span class="number">0.6158</span>, <span class="number">0.6377</span>, <span class="number">0.6377</span>, <span class="number">0.6597</span>, <span class="number">0.6597</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="built_in">calculate</span>(l, r):</span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        sum += (l[i] - r[i]) ** <span class="number">2</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="built_in">logExpFunc</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    【指数+对数】混合函数拟合</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    popt, pcov = <span class="built_in">curve_fit</span>(lambda t, a, b: a + b * t, x, y)</span><br><span class="line">    <span class="meta"># print(<span class="meta-string">&#x27;popt: &#x27;</span>, popt)</span></span><br><span class="line">    plt.<span class="built_in">figure</span>()</span><br><span class="line">    a, b = popt</span><br><span class="line">    y_pre = np.<span class="built_in">zeros</span>(<span class="number">25</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        y_pre[i] = a + b * x[i]</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="meta"># print(y_pre)</span></span><br><span class="line">    plt.<span class="built_in">plot</span>(x, y, <span class="string">&#x27;ko&#x27;</span>, label=<span class="string">&quot;Original Data&quot;</span>)</span><br><span class="line">    plt.<span class="built_in">plot</span>(x, y_pre, <span class="string">&#x27;r-&#x27;</span>, label=<span class="string">&quot;Fitting Curve&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ans_sum = <span class="built_in">calculate</span>(y, y_pre)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数方程为: y = &quot;</span>, a, <span class="string">&quot;+ &quot;</span>, b, <span class="string">&quot;* x&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;误差平法和为: &quot;</span>, ans_sum)</span><br><span class="line">    plt.<span class="built_in">legend</span>()</span><br><span class="line">    plt.<span class="built_in">show</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">logExpFunc</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220108184012004.png" alt="image-20220108184012004"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数方程为: y =  <span class="number">0.0753233461518582</span> +  <span class="number">0.0013524346132064435</span> * x</span><br><span class="line">误差平法和为:  <span class="number">0.03929075217692309</span></span><br></pre></td></tr></table></figure><p>2.多项式二次拟合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> curve_fit</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">90</span>, <span class="number">110</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">170</span>, <span class="number">190</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">250</span>, <span class="number">270</span>, <span class="number">290</span>,</span><br><span class="line">     <span class="number">310</span>, <span class="number">330</span>, <span class="number">350</span>, <span class="number">370</span>, <span class="number">390</span>, <span class="number">410</span>, <span class="number">430</span>, <span class="number">450</span>, <span class="number">470</span>, <span class="number">490</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0.066</span>, <span class="number">0.088</span>, <span class="number">0.1539</span>, <span class="number">0.1979</span>, <span class="number">0.2419</span>, <span class="number">0.2639</span>, <span class="number">0.3079</span>, <span class="number">0.3299</span>,</span><br><span class="line">     <span class="number">0.3738</span>, <span class="number">0.3958</span>, <span class="number">0.4398</span>, <span class="number">0.4398</span>, <span class="number">0.4618</span>, <span class="number">0.4838</span>, <span class="number">0.5498</span>, <span class="number">0.5498</span>, <span class="number">0.5718</span>,</span><br><span class="line">     <span class="number">0.5938</span>, <span class="number">0.6158</span>, <span class="number">0.6158</span>, <span class="number">0.6377</span>, <span class="number">0.6377</span>, <span class="number">0.6597</span>, <span class="number">0.6597</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">l, r</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        <span class="built_in">sum</span> += (l[i] - r[i]) ** <span class="number">2</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logExpFunc</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    【指数+对数】混合函数拟合</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    popt, pcov = curve_fit(<span class="keyword">lambda</span> t, a, b, c: a + b * t + c*t*t, x, y)</span><br><span class="line">    <span class="comment"># print(&#x27;popt: &#x27;, popt)</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    a, b, c = popt</span><br><span class="line">    y_pre = np.zeros(<span class="number">25</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        y_pre[i] = a + b * x[i] + c*x[i]*x[i]</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(y_pre)</span></span><br><span class="line">    plt.plot(x, y, <span class="string">&#x27;ko&#x27;</span>, label=<span class="string">&quot;Original Data&quot;</span>)</span><br><span class="line">    plt.plot(x, y_pre, <span class="string">&#x27;r-&#x27;</span>, label=<span class="string">&quot;Fitting Curve&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ans_sum = calculate(y, y_pre)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数方程为: y = &quot;</span>, a, <span class="string">&quot;+ &quot;</span>, b, <span class="string">&quot;* x + &quot;</span>, c, <span class="string">&quot;* x^2&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;误差平法和为: &quot;</span>, ans_sum)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logExpFunc()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220108184203859.png" alt="image-20220108184203859"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数方程为: y =  -<span class="number">0.010261798025374757</span> +  <span class="number">0.002378635382256669</span> * x +  -<span class="number">2.0524015318965664e-06</span> * x^<span class="number">2</span></span><br><span class="line">误差平法和为:  <span class="number">0.0030173465134150836</span></span><br></pre></td></tr></table></figure><p>3.多项式三次拟合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> curve_fit</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">90</span>, <span class="number">110</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">170</span>, <span class="number">190</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">250</span>, <span class="number">270</span>, <span class="number">290</span>,</span><br><span class="line">     <span class="number">310</span>, <span class="number">330</span>, <span class="number">350</span>, <span class="number">370</span>, <span class="number">390</span>, <span class="number">410</span>, <span class="number">430</span>, <span class="number">450</span>, <span class="number">470</span>, <span class="number">490</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0.066</span>, <span class="number">0.088</span>, <span class="number">0.1539</span>, <span class="number">0.1979</span>, <span class="number">0.2419</span>, <span class="number">0.2639</span>, <span class="number">0.3079</span>, <span class="number">0.3299</span>,</span><br><span class="line">     <span class="number">0.3738</span>, <span class="number">0.3958</span>, <span class="number">0.4398</span>, <span class="number">0.4398</span>, <span class="number">0.4618</span>, <span class="number">0.4838</span>, <span class="number">0.5498</span>, <span class="number">0.5498</span>, <span class="number">0.5718</span>,</span><br><span class="line">     <span class="number">0.5938</span>, <span class="number">0.6158</span>, <span class="number">0.6158</span>, <span class="number">0.6377</span>, <span class="number">0.6377</span>, <span class="number">0.6597</span>, <span class="number">0.6597</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">l, r</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        <span class="built_in">sum</span> += (l[i] - r[i]) ** <span class="number">2</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logExpFunc</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    【指数+对数】混合函数拟合</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    popt, pcov = curve_fit(<span class="keyword">lambda</span> t, a, b, c, d: a + b * t + c*t*t + d*t*t*t, x, y)</span><br><span class="line">    <span class="comment"># print(&#x27;popt: &#x27;, popt)</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    a, b, c, d = popt</span><br><span class="line">    y_pre = np.zeros(<span class="number">25</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        y_pre[i] = a + b * x[i] + c*x[i]*x[i] + d*x[i]*x[i]*x[i]</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(y_pre)</span></span><br><span class="line">    plt.plot(x, y, <span class="string">&#x27;ko&#x27;</span>, label=<span class="string">&quot;Original Data&quot;</span>)</span><br><span class="line">    plt.plot(x, y_pre, <span class="string">&#x27;r-&#x27;</span>, label=<span class="string">&quot;Fitting Curve&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ans_sum = calculate(y, y_pre)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数方程为: y = &quot;</span>, a, <span class="string">&quot;+ &quot;</span>, b, <span class="string">&quot;* x + &quot;</span>, c, <span class="string">&quot;* x^2 + &quot;</span>, d, <span class="string">&quot;* x^3&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;误差平法和为: &quot;</span>, ans_sum)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logExpFunc()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220108184314613.png" alt="image-20220108184314613"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数方程为: y =  -<span class="number">0.01554198015553527</span> +  <span class="number">0.0025047716694790757</span> * x +  -<span class="number">2.682494887865837e-06</span> * x^<span class="number">2</span> +  <span class="number">8.401244798810326e-10</span> * x^<span class="number">3</span></span><br><span class="line">误差平法和为:  <span class="number">0.0029210730215668773</span></span><br></pre></td></tr></table></figure><p>4.对数函数拟合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> curve_fit</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">90</span>, <span class="number">110</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">170</span>, <span class="number">190</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">250</span>, <span class="number">270</span>, <span class="number">290</span>,</span><br><span class="line">     <span class="number">310</span>, <span class="number">330</span>, <span class="number">350</span>, <span class="number">370</span>, <span class="number">390</span>, <span class="number">410</span>, <span class="number">430</span>, <span class="number">450</span>, <span class="number">470</span>, <span class="number">490</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0.066</span>, <span class="number">0.088</span>, <span class="number">0.1539</span>, <span class="number">0.1979</span>, <span class="number">0.2419</span>, <span class="number">0.2639</span>, <span class="number">0.3079</span>, <span class="number">0.3299</span>,</span><br><span class="line">     <span class="number">0.3738</span>, <span class="number">0.3958</span>, <span class="number">0.4398</span>, <span class="number">0.4398</span>, <span class="number">0.4618</span>, <span class="number">0.4838</span>, <span class="number">0.5498</span>, <span class="number">0.5498</span>, <span class="number">0.5718</span>,</span><br><span class="line">     <span class="number">0.5938</span>, <span class="number">0.6158</span>, <span class="number">0.6158</span>, <span class="number">0.6377</span>, <span class="number">0.6377</span>, <span class="number">0.6597</span>, <span class="number">0.6597</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">l, r</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        <span class="built_in">sum</span> += (l[i] - r[i]) ** <span class="number">2</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logExpFunc</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    【指数+对数】混合函数拟合</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    popt, pcov = curve_fit(<span class="keyword">lambda</span> t, a, b, c: a + b * np.log(c*t), x, y)</span><br><span class="line">    <span class="comment"># print(&#x27;popt: &#x27;, popt)</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    a, b, c = popt</span><br><span class="line">    y_pre = np.zeros(<span class="number">25</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        y_pre[i] = a + b * np.log(c*x[i])</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(y_pre)</span></span><br><span class="line">    plt.plot(x, y, <span class="string">&#x27;ko&#x27;</span>, label=<span class="string">&quot;Original Data&quot;</span>)</span><br><span class="line">    plt.plot(x, y_pre, <span class="string">&#x27;r-&#x27;</span>, label=<span class="string">&quot;Fitting Curve&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ans_sum = calculate(y, y_pre)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数方程为: y = &quot;</span>, a, <span class="string">&quot;+ &quot;</span>, b, <span class="string">&quot;* log(&quot;</span>, c, <span class="string">&quot;* x)&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;误差平法和为: &quot;</span>, ans_sum)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logExpFunc()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220108184414690.png" alt="image-20220108184414690"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数方程为: y =  -<span class="number">0.13743768890879166</span> +  <span class="number">0.20275284335839938</span> * log( <span class="number">0.08115019001553712</span> * x)</span><br><span class="line">误差平法和为:  <span class="number">0.0884969007716507</span></span><br></pre></td></tr></table></figure><p>5.幂函数拟合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> curve_fit</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">90</span>, <span class="number">110</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">170</span>, <span class="number">190</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">250</span>, <span class="number">270</span>, <span class="number">290</span>,</span><br><span class="line">     <span class="number">310</span>, <span class="number">330</span>, <span class="number">350</span>, <span class="number">370</span>, <span class="number">390</span>, <span class="number">410</span>, <span class="number">430</span>, <span class="number">450</span>, <span class="number">470</span>, <span class="number">490</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0.066</span>, <span class="number">0.088</span>, <span class="number">0.1539</span>, <span class="number">0.1979</span>, <span class="number">0.2419</span>, <span class="number">0.2639</span>, <span class="number">0.3079</span>, <span class="number">0.3299</span>,</span><br><span class="line">     <span class="number">0.3738</span>, <span class="number">0.3958</span>, <span class="number">0.4398</span>, <span class="number">0.4398</span>, <span class="number">0.4618</span>, <span class="number">0.4838</span>, <span class="number">0.5498</span>, <span class="number">0.5498</span>, <span class="number">0.5718</span>,</span><br><span class="line">     <span class="number">0.5938</span>, <span class="number">0.6158</span>, <span class="number">0.6158</span>, <span class="number">0.6377</span>, <span class="number">0.6377</span>, <span class="number">0.6597</span>, <span class="number">0.6597</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">l, r</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        <span class="built_in">sum</span> += (l[i] - r[i]) ** <span class="number">2</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logExpFunc</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    【指数+对数】混合函数拟合</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    popt, pcov = curve_fit(<span class="keyword">lambda</span> t, a, b, c: a + b * <span class="built_in">pow</span>(t,c), x, y)</span><br><span class="line">    <span class="comment"># print(&#x27;popt: &#x27;, popt)</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    a, b, c = popt</span><br><span class="line">    y_pre = np.zeros(<span class="number">25</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        y_pre[i] = a + b * <span class="built_in">pow</span>(x[i],c)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(y_pre)</span></span><br><span class="line">    plt.plot(x, y, <span class="string">&#x27;ko&#x27;</span>, label=<span class="string">&quot;Original Data&quot;</span>)</span><br><span class="line">    plt.plot(x, y_pre, <span class="string">&#x27;r-&#x27;</span>, label=<span class="string">&quot;Fitting Curve&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ans_sum = calculate(y, y_pre)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数方程为: y = &quot;</span>, a, <span class="string">&quot;+ &quot;</span>, b, <span class="string">&quot;* x^&quot;</span>, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;误差平法和为: &quot;</span>, ans_sum)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logExpFunc()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220108184539720.png" alt="image-20220108184539720"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数方程为: y =  -<span class="number">0.12046133856780444</span> +  <span class="number">0.028922277156448857</span> * x^ <span class="number">0.5383601835817152</span>误差平法和为:  <span class="number">0.006097853864241196</span></span><br></pre></td></tr></table></figure><p>根据实验结果可以发现，多项式三次拟合的效果最好。</p><p>根据多项式三次拟合的结果，可以预测到x=200是，y=0.4</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> curve_fit</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">90</span>, <span class="number">110</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">170</span>, <span class="number">190</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">250</span>, <span class="number">270</span>, <span class="number">290</span>,</span><br><span class="line">     <span class="number">310</span>, <span class="number">330</span>, <span class="number">350</span>, <span class="number">370</span>, <span class="number">390</span>, <span class="number">410</span>, <span class="number">430</span>, <span class="number">450</span>, <span class="number">470</span>, <span class="number">490</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0.066</span>, <span class="number">0.088</span>, <span class="number">0.1539</span>, <span class="number">0.1979</span>, <span class="number">0.2419</span>, <span class="number">0.2639</span>, <span class="number">0.3079</span>, <span class="number">0.3299</span>,</span><br><span class="line">     <span class="number">0.3738</span>, <span class="number">0.3958</span>, <span class="number">0.4398</span>, <span class="number">0.4398</span>, <span class="number">0.4618</span>, <span class="number">0.4838</span>, <span class="number">0.5498</span>, <span class="number">0.5498</span>, <span class="number">0.5718</span>,</span><br><span class="line">     <span class="number">0.5938</span>, <span class="number">0.6158</span>, <span class="number">0.6158</span>, <span class="number">0.6377</span>, <span class="number">0.6377</span>, <span class="number">0.6597</span>, <span class="number">0.6597</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">l, r</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        <span class="built_in">sum</span> += (l[i] - r[i]) ** <span class="number">2</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logExpFunc</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    【指数+对数】混合函数拟合</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    popt, pcov = curve_fit(<span class="keyword">lambda</span> t, a, b, c, d: a + b * t + c*t*t + d*t*t*t, x, y)</span><br><span class="line">    <span class="comment"># print(&#x27;popt: &#x27;, popt)</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    a, b, c, d = popt</span><br><span class="line">    y_pre = np.zeros(<span class="number">25</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">25</span>:</span><br><span class="line">        y_pre[i] = a + b * x[i] + c*x[i]*x[i] + d*x[i]*x[i]*x[i]</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(y_pre)</span></span><br><span class="line">    plt.plot(x, y, <span class="string">&#x27;ko&#x27;</span>, label=<span class="string">&quot;Original Data&quot;</span>)</span><br><span class="line">    plt.plot(x, y_pre, <span class="string">&#x27;r-&#x27;</span>, label=<span class="string">&quot;Fitting Curve&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ans_sum = calculate(y, y_pre)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数方程为: y = &quot;</span>, a, <span class="string">&quot;+ &quot;</span>, b, <span class="string">&quot;* x + &quot;</span>, c, <span class="string">&quot;* x^2 + &quot;</span>, d, <span class="string">&quot;* x^3&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;误差平法和为: &quot;</span>, ans_sum)</span><br><span class="line"></span><br><span class="line">    pointX = [<span class="number">200</span>]</span><br><span class="line">    pointy = [a + b * <span class="number">200</span> + c*<span class="number">200</span>*<span class="number">200</span> + d*<span class="number">200</span>*<span class="number">200</span>*<span class="number">200</span>]</span><br><span class="line">    plt.scatter(pointX, pointy, marker=<span class="string">&#x27;o&#x27;</span>, s=<span class="number">70</span>, label=<span class="string">&quot;sample point&quot;</span>, zorder=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    value = b + c*<span class="number">2</span>*<span class="number">200</span> + d*<span class="number">3</span>*<span class="number">200</span>*<span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 备注的填写</span></span><br><span class="line">    plt.annotate(</span><br><span class="line">        <span class="string">r&#x27;x = 200,y’ = %.7f&#x27;</span> % (value),  <span class="comment"># 备注中显示的文本内容</span></span><br><span class="line">        xycoords=<span class="string">&#x27;data&#x27;</span>,  <span class="comment"># 备注目标点所使用的坐标系（data表示数据坐标系）</span></span><br><span class="line">        <span class="comment"># xy=(np.pi, -1),  # 备注目标点的坐标</span></span><br><span class="line">        xy=(pointX[<span class="number">0</span>], pointy[<span class="number">0</span>]),  <span class="comment"># 备注目标点的坐标</span></span><br><span class="line">        textcoords=<span class="string">&#x27;offset points&#x27;</span>,  <span class="comment"># 备注文本所使用的坐标系（offset points表示参照点的偏移坐标系）</span></span><br><span class="line">        xytext=(<span class="number">20</span>, -<span class="number">30</span>),  <span class="comment"># 备注文本的坐标</span></span><br><span class="line">        fontsize=<span class="number">14</span>,  <span class="comment"># 备注文本的字体大小</span></span><br><span class="line">        arrowprops=<span class="built_in">dict</span>(</span><br><span class="line">            arrowstyle=<span class="string">&#x27;-|&gt;&#x27;</span>,  <span class="comment"># 定义箭头样式</span></span><br><span class="line">            connectionstyle=<span class="string">&#x27;angle3&#x27;</span>  <span class="comment"># 定义连接线的样式</span></span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logExpFunc()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220108184757094.png" alt="image-20220108184757094"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数方程为: y =  -<span class="number">0.01554198015553527</span> +  <span class="number">0.0025047716694790757</span> * x +  -<span class="number">2.682494887865837e-06</span> * x^<span class="number">2</span> +  <span class="number">8.401244798810326e-10</span> * x^<span class="number">3</span>误差平法和为:  <span class="number">0.0029210730215668773</span></span><br></pre></td></tr></table></figure><p>二、随机生成数据，采用梯度下降法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 梯度下降法</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.zeros(<span class="number">100</span>)</span><br><span class="line">y = np.zeros(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    x[i] = random.random()</span><br><span class="line">    y[i] = random.random() * <span class="number">0.2</span> - <span class="number">0.1</span> + x[i] * x[i] + x[i] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成系数，赋初值</span></span><br><span class="line">a1 = random.random()</span><br><span class="line">a2 = random.random()</span><br><span class="line">a3 = random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来画最终的线条</span></span><br><span class="line">h = np.zeros(<span class="number">100</span>)</span><br><span class="line">A = <span class="number">0.3</span>  <span class="comment"># 学习率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    sum_1, sum_2, sum_3 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="comment"># 计算对应的y[i]</span></span><br><span class="line">        h[i] = a1 + a2 * x[i] + a3 * x[i] * x[i]</span><br><span class="line">        <span class="comment"># 计算差值</span></span><br><span class="line">        sum_1 += (h[i] - y[i])</span><br><span class="line">        sum_2 += (h[i] - y[i]) * x[i]</span><br><span class="line">        sum_3 += (h[i] - y[i]) * x[i] * x[i]</span><br><span class="line">    <span class="comment"># 学习方法</span></span><br><span class="line">    a1 = a1 - A * (sum_1 / <span class="number">100</span>)</span><br><span class="line">    a2 = a2 - A * (sum_2 / <span class="number">100</span>)</span><br><span class="line">    a3 = a3 - A * (sum_3 / <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(a1, a2, a3)</span><br><span class="line">x1 = <span class="built_in">list</span>(x)</span><br><span class="line">x1 = <span class="built_in">sorted</span>(x1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    h[i] = a1 + a2 * x1[i] + a3 * x1[i] * x1[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line"><span class="comment"># print(h)</span></span><br><span class="line"><span class="comment"># print(type(x),type(h))</span></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x1, h, <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X = np.linspace(0,10,100)  # X轴坐标数据</span></span><br><span class="line"><span class="comment"># Y = X*X                   # Y轴坐标数据</span></span><br><span class="line"><span class="comment"># plt.plot(X,Y)</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220108184917679.png" alt="image-20220108184917679"></p><p>三、选取第一列和第四列数据进行拟合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">workxls = xlrd.open_workbook(<span class="string">&quot;1_Iris.xlsx&quot;</span>)</span><br><span class="line">worksheet = workxls.sheet_by_name(<span class="string">&quot;dataset&quot;</span>)</span><br><span class="line">row = worksheet.nrows  <span class="comment"># 总行数</span></span><br><span class="line">X = []</span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    rowdate = worksheet.row_values(i)  <span class="comment"># i行的list</span></span><br><span class="line">    <span class="comment"># print(rowdate[0])</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(rowdate) &gt; <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> rowdate[<span class="number">4</span>] == <span class="number">0</span>:</span><br><span class="line">            newrowdata = []</span><br><span class="line">            newrowdata.append(rowdate[<span class="number">0</span>])</span><br><span class="line">            X.append(newrowdata)</span><br><span class="line">            newrowdata = []</span><br><span class="line">            newrowdata.append(rowdate[<span class="number">3</span>])</span><br><span class="line">            Y.append(newrowdata)</span><br><span class="line">        <span class="keyword">elif</span> rowdate[<span class="number">4</span>] == <span class="number">1</span>:</span><br><span class="line">            newrowdata = []</span><br><span class="line">            newrowdata.append(rowdate[<span class="number">0</span>])</span><br><span class="line">            X.append(newrowdata)</span><br><span class="line">            newrowdata = []</span><br><span class="line">            newrowdata.append(rowdate[<span class="number">3</span>])</span><br><span class="line">            Y.append(newrowdata)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(X,Y)</span></span><br><span class="line">X = np.array(X)</span><br><span class="line">Y = np.array(Y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分为训练集和测试集，测试集取20%</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=<span class="number">0.2</span>,random_state=<span class="number">2020</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 模型训练和预测</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线性回归对象</span></span><br><span class="line">regr = LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用训练集训练模型</span></span><br><span class="line">regr.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在测试集上进行预测</span></span><br><span class="line">y_pred = regr.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 打印前3个预测值和真实值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y_pred:&#x27;</span>,y_pred[:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y_test:&#x27;</span>,y_test[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 打印斜率和截距</span></span><br><span class="line"><span class="built_in">print</span>(regr.coef_,regr.intercept_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画测试数据散点图</span></span><br><span class="line">plt.scatter(X_test, y_test,  color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画线性回归模型对测试数据的拟合曲线</span></span><br><span class="line">plt.plot(X_test, y_pred, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示绘图结果</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印斜率和截距</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;斜率：&#123;&#125;, 截距：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(regr.coef_,regr.intercept_))</span><br></pre></td></tr></table></figure><p><img src="/posts/774fca9d/image-20220108185016614.png" alt="image-20220108185016614"></p><h3 id="三、总结（心得体会）"><a href="#三、总结（心得体会）" class="headerlink" title="三、总结（心得体会）"></a>三、总结（心得体会）</h3><p>线性回归分为三种类型：一元线性回归、多元线性回归、逻辑回归</p><p>又分为三种做法：最小二乘法、梯度下降法、很抽象的逻辑回归的做法（这个我是没怎么看明白）</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;线性回归的实现方式&quot;&gt;&lt;a href=&quot;#线性回归的实现方式&quot; class=&quot;headerlink&quot; title=&quot;线性回归的实现方式&quot;&gt;&lt;/a&gt;线性回归的实现方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;最小二乘法&lt;/li&gt;
&lt;li&gt;梯度下降法&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://wxm.fit/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="实践二" scheme="http://wxm.fit/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E8%B7%B5%E4%BA%8C/"/>
    
    
    <category term="Python" scheme="http://wxm.fit/tags/Python/"/>
    
    <category term="机器学习" scheme="http://wxm.fit/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>线性回归介绍和Python实现</title>
    <link href="http://wxm.fit/posts/fae43975/"/>
    <id>http://wxm.fit/posts/fae43975/</id>
    <published>2022-01-05T05:57:15.000Z</published>
    <updated>2022-01-11T12:36:40.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、线性回归介绍"><a href="#一、线性回归介绍" class="headerlink" title="一、线性回归介绍"></a>一、线性回归介绍</h2><p>线性回归是利用数理统计中回归分析来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。其表达形式为 y=w′x+e，e 为误差（服从均值为 0 的正态分布），数学上 e 叫截距。</p><ul><li>当回归分析中只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，称为<strong>一元线性回归分析</strong>。</li><li>当回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为<strong>多元线性回归分析</strong>。</li></ul><span id="more"></span><h3 id="1、回归分析流程"><a href="#1、回归分析流程" class="headerlink" title="1、回归分析流程"></a>1、回归分析流程</h3><p>线性回归属于回归问题。回归问题的流程如下：</p><ol><li>给定数据集中每个样本及其正确答案。</li><li>选择一个模型函数 h，这里的 h 代表 hypothesis（假设）。</li><li>为 h 找到此数据集的（未必是全局）最优解，即找出最优解下的 h 的参数。</li></ol><p>这里给定的数据集是训练集（Training Set）。不能所有数据都拿来训练，要留一部分验证模型的准确率，这部分叫测试集。</p><h3 id="2、典型的线性回归模型"><a href="#2、典型的线性回归模型" class="headerlink" title="2、典型的线性回归模型"></a>2、典型的线性回归模型</h3><p>下面是几个典型的线性回归模型：</p><ul><li>最基本的单变量线性回归：<ul><li>y=bx+e</li></ul></li><li>多变量线性回归：<ul><li>h^=θ0+θ1x1+θ2x2+⋯+θnxn+e</li></ul></li><li>多项式回归（Polynomial Regression）：<ul><li>h^=θ0+θ1x1+…+θn−1xn−1+θnxn</li><li>我们可以令 x2=x2，x3=x3 将其转化为了线性回归模型。</li></ul></li></ul><p>最终通用表达式就是：h^=θTX=θ0+θ1x1+θ2x2+⋯+θnxn+e</p><h2 id="二、sklearn-实现简单线性回归"><a href="#二、sklearn-实现简单线性回归" class="headerlink" title="二、sklearn 实现简单线性回归"></a>二、sklearn 实现简单线性回归</h2><p>在进行多元线性回归之间通过简单线性回归来展现线性回归的特性和结果，后面再延伸至多元线性回归。</p><h3 id="1、包导入"><a href="#1、包导入" class="headerlink" title="1、包导入"></a>1、包导入</h3><p>这里导入进行线性回归的包，我们利用 pandas 和 numpy 对数据进行操作，使用 matplotlib 进行图像化，使用 sklearn 进行数据集训练与模型导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br></pre></td></tr></table></figure><h3 id="2、数据集创建"><a href="#2、数据集创建" class="headerlink" title="2、数据集创建"></a>2、数据集创建</h3><p>这里我们创建一个数据集来描述学生学习时间与成绩的关系并且做简单的线性回归。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建数据集</span></span><br><span class="line">examDict  = &#123;<span class="string">&#x27;学习时间&#x27;</span>:[<span class="number">0.50</span>,<span class="number">0.75</span>,<span class="number">1.00</span>,<span class="number">1.25</span>,<span class="number">1.50</span>,<span class="number">1.75</span>,<span class="number">1.75</span>,<span class="number">2.00</span>,<span class="number">2.25</span>,<span class="number">2.50</span>,<span class="number">2.75</span>,<span class="number">3.00</span>,<span class="number">3.25</span>,<span class="number">3.50</span>,<span class="number">4.00</span>,<span class="number">4.25</span>,<span class="number">4.50</span>,<span class="number">4.75</span>,<span class="number">5.00</span>,<span class="number">5.50</span>],</span><br><span class="line">             <span class="string">&#x27;分数&#x27;</span>:[<span class="number">10</span>,<span class="number">22</span>,<span class="number">13</span>,<span class="number">43</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">50</span>,<span class="number">62</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">75</span>,<span class="number">62</span>,<span class="number">73</span>,<span class="number">81</span>,<span class="number">76</span>,<span class="number">64</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">93</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换为DataFrame的数据格式</span></span><br><span class="line">examDf = pd.DataFrame(examDict)</span><br><span class="line">examDf.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"></th><th align="left">分数</th><th>学习时间</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">10</td><td>0.50</td></tr><tr><td align="left">1</td><td align="left">22</td><td>0.75</td></tr><tr><td align="left">2</td><td align="left">13</td><td>1.00</td></tr><tr><td align="left">3</td><td align="left">43</td><td>1.25</td></tr><tr><td align="left">4</td><td align="left">20</td><td>1.50</td></tr></tbody></table><p>从上面的数据可以看到数据的<strong>特征值</strong>与<strong>标签</strong>，学生的<strong>学习时间</strong>就是所需要的特征值，而<strong>分数</strong>就是通过特征值所反应的标签。</p><h3 id="3、数据集散点图"><a href="#3、数据集散点图" class="headerlink" title="3、数据集散点图"></a>3、数据集散点图</h3><p>这里我们利用散点图来简单看下学习时间与成绩的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制散点图</span></span><br><span class="line">plt.scatter(examDf[<span class="string">&#x27;学习时间&#x27;</span>], examDf[<span class="string">&#x27;分数&#x27;</span>], color=<span class="string">&#x27;b&#x27;</span>, label=<span class="string">&quot;Exam Data&quot;</span>)</span><br><span class="line"><span class="comment">#添加图的标签（x轴、y轴）</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;Hours&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Score&quot;</span>)</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>从上图可以看到，分数和时间存在一定的相关性。下面我们看下两个变量因素的相关密切程度。</p><h3 id="4、相关系数"><a href="#4、相关系数" class="headerlink" title="4、相关系数"></a>4、相关系数</h3><p>相关系数的公式如下：<br>$$<br>P_{x y}=\frac{\operatorname{cov}(X, Y)}{\sigma_{x} \sigma_{y}}<br>$$<br>我们可以简单的认为：</p><ul><li>0~0.3 弱相关</li><li>0.3~0.6 中等程度相关</li><li>0.6~1 强相关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rDf = examDf.corr()</span><br><span class="line"><span class="built_in">print</span>(rDf)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"></th><th align="left">分数</th><th>学习时间</th></tr></thead><tbody><tr><td align="left">分数</td><td align="left">1.000000</td><td>0.923985</td></tr><tr><td align="left">学习时间</td><td align="left">0.923985</td><td>1.000000</td></tr></tbody></table><p>pandas 中的数学统计函数 <code>DataFrame.corr()</code> 可以反应数据间的相关性关系，可从表值中反应出学习时间与分数之间的相关性为强相关（0.6~1）。</p><h3 id="5、最小二乘法"><a href="#5、最小二乘法" class="headerlink" title="5、最小二乘法"></a>5、最小二乘法</h3><p>简单回归方程为：<code>y = a + b*x</code>，而这个最佳拟合线是通过最小二乘法来得到。</p><p>最小二乘法的几个概念：</p><ul><li><strong>点误差</strong>：<code>点误差 = 实际值 - 预测值</code></li><li>**误差平方和 (Sum of square error)**：<code>SSE = Σ（实际值-预测值）^2</code></li></ul><p>最小二乘法就是使得<strong>误差平方和</strong>最小来得到最佳拟合。</p><h3 id="6、训练集、测试集划分"><a href="#6、训练集、测试集划分" class="headerlink" title="6、训练集、测试集划分"></a>6、训练集、测试集划分</h3><p>这里使用 sklearn 中的 <code>train_test_split</code> 函数来划分训练、测试集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exam_X = examDf[<span class="string">&#x27;学习时间&#x27;</span>]</span><br><span class="line">exam_Y = examDf[<span class="string">&#x27;分数&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原数据集拆分训练集和测试集</span></span><br><span class="line">X_train,X_test,Y_train,Y_test = train_test_split(exam_X,exam_Y,train_size = <span class="number">0.8</span>,test_size = <span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据特征:&quot;</span>,exam_X.shape,<span class="string">&quot;,训练数据特征:&quot;</span>,X_train.shape,<span class="string">&quot;,测试数据特征:&quot;</span>,X_test.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据标签:&quot;</span>,exam_Y.shape,<span class="string">&quot;,训练数据标签:&quot;</span>,Y_train.shape,<span class="string">&quot;,测试数据标签:&quot;</span>,Y_test.shape)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原始数据特征: (<span class="number">20</span>,) ,训练数据特征: (<span class="number">16</span>,) ,测试数据特征: (<span class="number">4</span>,)</span><br><span class="line">原始数据标签: (<span class="number">20</span>,) ,训练数据标签: (<span class="number">16</span>,) ,测试数据标签: (<span class="number">4</span>,)</span><br></pre></td></tr></table></figure><p>下面是可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#散点图</span></span><br><span class="line">plt.scatter(X_train, Y_train, color=<span class="string">&quot;blue&quot;</span>, label=<span class="string">&quot;train data&quot;</span>)</span><br><span class="line">plt.scatter(X_test, Y_test, color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;test data&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#添加图标标签</span></span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Hours&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Pass&quot;</span>)</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/posts/fae43975/image-20220105144156872-1641364923334.png" alt="image-20220105144156872"></p><p><strong>注意：由于训练集随机分配，每一次运行的结果（点的分布情况，训练集内的情况，测试集内的情况）不都相同。</strong></p><h3 id="7、模型训练"><a href="#7、模型训练" class="headerlink" title="7、模型训练"></a>7、模型训练</h3><p>在创建数据集之后我们需要将训练集放入 sklearn 中的线性回归模型 <code>LinearRegression()</code> 进行训练，使用函数中的<code>.fit</code> 方法进行模型的训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model = LinearRegression()</span><br><span class="line"></span><br><span class="line">X_train = X_train.values.reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">X_test = X_test.values.reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">model.fit(X_train,Y_train)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinearRegression(copy_X=<span class="literal">True</span>, fit_intercept=<span class="literal">True</span>, n_jobs=<span class="number">1</span>, normalize=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：因为 model 需要二维的数组来进行拟合但是这里只有一个特征所以需要 reshape 来转换为二维数组。</strong></p><p>在模型训练完成之后会得到所对应的方程式（线性回归方程式）需要利用函数中的 <code>intercept_</code>与 <code>coef_</code>来得到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = model.intercept_  <span class="comment">#截距</span></span><br><span class="line">b = model.coef_       <span class="comment">#回归系数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最佳拟合线：截距&quot;</span>,a,<span class="string">&quot;,回归系数：&quot;</span>,b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳拟合线：截距 <span class="number">7.865536723163828</span> ,回归系数： [<span class="number">15.84256121</span>]</span><br></pre></td></tr></table></figure><p>由上述的最佳拟合线的截距和回归系数可以算出其线性回归线方程：<code>y = 7.56 + 16.28*x</code>。</p><h3 id="8、模型评价"><a href="#8、模型评价" class="headerlink" title="8、模型评价"></a>8、模型评价</h3><p>接下来需要对模型进行预测并评价。<strong>决定系数是反映模型拟合优度的重要的统计量</strong>。下面是决定系数的简单介绍。</p><p>假设一数据集包括 <code>y1,...,yn</code> 共 n 个观察值，相对应的模型预测值分别为 <code>f1,...,fn</code>。定义残差 <code>ei = yi − fi</code>，然后可以推得：</p><ul><li>平均观察值：</li><li>总平方和(总波动)：</li><li>回归平方和：</li><li>残差平方和：</li></ul><p>由此，决定系数可定义为:<br>$$<br>R^{2} \equiv 1-\frac{S S_{\mathrm{res}}}{S S_{\mathrm{tot}}}<br>$$<br><img src="/posts/fae43975/image-20220105144156872-1641364923335.png"></p><p><strong>线性回归（右侧）的效果比起平均值（左侧）越好，决定系数的值就越接近于 1。 蓝色正方形表示线性回归的残差的平方，红色正方形数据表示对于平均值的残差的平方</strong>。</p><p>从上述定义可以看出，R2 取值在 0 到 1 之间，且无单位，其数值大小反映了回归贡献的相对程度，即在因变量 Y 的总变异中回归关系所能解释的百分比。R2 是最常用于评价回归模型优劣程度的指标，R2 越大（接近于 1），所拟合的回归方程越优。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练数据的预测值</span></span><br><span class="line">y_train_pred = model.predict(X_train)</span><br><span class="line"><span class="comment">#绘制最佳拟合线：标签用的是训练数据的预测值y_train_pred</span></span><br><span class="line">plt.plot(X_train, y_train_pred, color=<span class="string">&#x27;black&#x27;</span>, linewidth=<span class="number">3</span>, label=<span class="string">&quot;best line&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试数据散点图</span></span><br><span class="line">plt.scatter(X_train, Y_train, color=<span class="string">&quot;blue&quot;</span>, label=<span class="string">&quot;train data&quot;</span>)</span><br><span class="line">plt.scatter(X_test, Y_test, color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&quot;test data&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加图标标签</span></span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Hours&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Score&quot;</span>)</span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/posts/fae43975/image-20220105145229049-1641365550743.png" alt="image-20220105145229049"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">score = model.score(X_test,Y_test)</span><br><span class="line"><span class="built_in">print</span>(score)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.9303130114611893</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、线性回归介绍&quot;&gt;&lt;a href=&quot;#一、线性回归介绍&quot; class=&quot;headerlink&quot; title=&quot;一、线性回归介绍&quot;&gt;&lt;/a&gt;一、线性回归介绍&lt;/h2&gt;&lt;p&gt;线性回归是利用数理统计中回归分析来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。其表达形式为 y=w′x+e，e 为误差（服从均值为 0 的正态分布），数学上 e 叫截距。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当回归分析中只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，称为&lt;strong&gt;一元线性回归分析&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;当回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为&lt;strong&gt;多元线性回归分析&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://wxm.fit/tags/Python/"/>
    
    <category term="机器学习" scheme="http://wxm.fit/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python画图</title>
    <link href="http://wxm.fit/posts/fc6bcf84/"/>
    <id>http://wxm.fit/posts/fc6bcf84/</id>
    <published>2022-01-03T00:24:39.000Z</published>
    <updated>2022-01-12T06:41:48.889Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>绘制图像的数据是如何存放的—–&gt; numpy包定义了数组和矩阵</p><p>图像又是如何绘制的——–&gt; matplotlib包定义了绘制图像的方式</p><h2 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h2><p>使用Python画图绘制折线图、散点图、直方图、饼图、三维空间曲线、曲面图等。</p><span id="more"></span><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><p>折线图示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作为序列生成器， numpy.linspace()函数用于在线性空间中以均匀步长生成数字序列。</span></span><br><span class="line"><span class="comment"># 在（0，2*np.pi）之间生成1000个数字</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y_sin 生成x对应的sin函数值</span></span><br><span class="line"><span class="comment"># y_cos 生成x对应的cos函数值</span></span><br><span class="line">y_sin = np.sin(x)</span><br><span class="line">y_cos = np.cos(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 sinX  绘制cosX</span></span><br><span class="line"><span class="comment"># plot函数参数分别表示x轴上的值，y轴上的值，折线图线条风格，折线图线条宽度，折线的颜色，折线的标签</span></span><br><span class="line">mp.plot(x, y_sin, linestyle=<span class="string">&quot;:&quot;</span>, linewidth=<span class="number">2</span>, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>, <span class="number">1.0</span>), label=<span class="string">&quot;y=sin(x)&quot;</span>)</span><br><span class="line">mp.plot(x, y_cos, linestyle=<span class="string">&quot;-.&quot;</span>, linewidth=<span class="number">3</span>, color=<span class="string">&quot;r&quot;</span>, label=<span class="string">&quot;y=cos(x)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义标签的位置</span></span><br><span class="line">mp.legend(<span class="string">&quot;upper right&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示折线图</span></span><br><span class="line">mp.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/1" alt="image-20220103182410017"></p><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p>散点图示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 解决了中文乱码问题</span></span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line">font_set = FontProperties(fname=<span class="string">r&quot;c:\windows\fonts\simsun.ttc&quot;</span>, size=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">x = np.array(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>))</span><br><span class="line">y = x**<span class="number">2</span></span><br><span class="line"><span class="comment"># plt.scatter()函数参数，x值，y值，s标量一般为20，marker标注，color颜色</span></span><br><span class="line">plt.scatter(x, y, s=<span class="number">20</span>, marker=<span class="string">&#x27;*&#x27;</span>, color=<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标签</span></span><br><span class="line">plt.title(<span class="string">&quot;y = x^2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x，y轴的标签</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;x轴&quot;</span>, fontproperties=font_set)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y轴&quot;</span>, fontproperties=font_set)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标的取值范围[x0,x1,y1,y2]</span></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">2600</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/4" alt="image-20220103190557345"></p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>直方图示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们设置相同的seed，每次生成的随机数相同。</span></span><br><span class="line"><span class="comment"># 如果不设置seed，则每次会生成不同的随机数</span></span><br><span class="line">np.random.seed(<span class="number">1234</span>)</span><br><span class="line"><span class="comment"># 生成数据mu表示平均数，sigma表示平方差</span></span><br><span class="line">mu = <span class="number">100</span></span><br><span class="line">sigma = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># randn()函数返回一个或一组样本，具有标准正态分布。</span></span><br><span class="line"><span class="comment"># 返回值为指定维度的array</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">500</span>)  <span class="comment"># 500个数</span></span><br><span class="line">bins = <span class="number">20</span>  <span class="comment"># 分成20簇</span></span><br><span class="line"><span class="comment"># plt.hist()函数x表示数据,bins表示直方图条数，range直方图上下界，normed表示频数或频率，weights表示权重，color表示颜色</span></span><br><span class="line">plt.hist(x, bins, color=<span class="string">&#x27;green&#x27;</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/5" alt="image-20220103193408534"></p><h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><p>饼状图示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制饼图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">labels = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">fracs = [<span class="number">15</span>, <span class="number">30.55</span>, <span class="number">44.44</span>, <span class="number">10</span>]</span><br><span class="line">explode = [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 0.1表示突出这部分</span></span><br><span class="line"></span><br><span class="line">plt.pie(x=fracs, labels=labels, explode=explode, autopct=<span class="string">&#x27;%3.1f %%&#x27;</span>,</span><br><span class="line">        shadow=<span class="literal">True</span>, labeldistance=<span class="number">1.1</span>, startangle=<span class="number">90</span>, pctdistance=<span class="number">0.6</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">labeldistance，文本的位置离远点有多远，1.1指1.1倍半径的位置</span></span><br><span class="line"><span class="string">autopct，饼图里面的文本格式，%3.1f%%表示小数有三位，整数有一位的浮点数</span></span><br><span class="line"><span class="string">shadow，饼是否有阴影</span></span><br><span class="line"><span class="string">startangle，起始角度，0，表示从0开始逆时针转，为第一块。一般选择从90度开始比较好看</span></span><br><span class="line"><span class="string">pctdistance，百分比的text离圆心的距离</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/6" alt="image-20220103194030383"></p><h3 id="高斯分布曲线"><a href="#高斯分布曲线" class="headerlink" title="高斯分布曲线"></a>高斯分布曲线</h3><p>高斯分布曲线示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制高斯（正态）分布曲线 x~N(0,5)</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plot</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">miu = <span class="number">0</span>  <span class="comment"># 均值</span></span><br><span class="line">sigma = math.sqrt(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成x,y  y = f(x) = 1 / (sqrt(2*pi)*sigma) * exp(-(x-miu)**2 / (2*sigma**2))</span></span><br><span class="line">x = np.linspace(miu - <span class="number">3</span> * sigma, miu + <span class="number">3</span> * sigma, <span class="number">50</span>)</span><br><span class="line">y = np.exp(-(x-miu)**<span class="number">2</span> / (<span class="number">2</span>*sigma**<span class="number">2</span>)) / (math.sqrt(<span class="number">2</span>*math.pi)*sigma)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;r&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/7" alt="image-20220103194819838"></p><h3 id="三维散点图"><a href="#三维散点图" class="headerlink" title="三维散点图"></a>三维散点图</h3><p>三维散点图示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制三维散点图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D  <span class="comment"># 空间三维</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据</span></span><br><span class="line">data = np.arange(<span class="number">24</span>).reshape((<span class="number">8</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">x = data[:, <span class="number">0</span>]</span><br><span class="line">y = data[:, <span class="number">1</span>]</span><br><span class="line">z = data[:, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">ax.scatter(x, y, z, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/8" alt="image-20220103195505513"></p><h3 id="绘制三维曲面图"><a href="#绘制三维曲面图" class="headerlink" title="绘制三维曲面图"></a>绘制三维曲面图</h3><p>三维曲面图示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制三维曲面图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">x = np.linspace(<span class="number">0.1</span>, <span class="number">0.9</span>, <span class="number">9</span>)</span><br><span class="line">y = np.linspace(<span class="number">0.1</span>, <span class="number">0.9</span>, <span class="number">9</span>)</span><br><span class="line">x, y = np.meshgrid(x, y)</span><br><span class="line">z = np.power(x, <span class="number">2</span>) + np.power(y, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&quot;average accuracy&quot;</span>)</span><br><span class="line">ax.plot_surface(x, y, z, cmap=plt.cm.jet)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;cls_conf&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;conf&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;acc&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/9" alt="image-20220103195831708"></p><h3 id="绘制二元三维高斯分布曲线"><a href="#绘制二元三维高斯分布曲线" class="headerlink" title="绘制二元三维高斯分布曲线"></a>绘制二元三维高斯分布曲线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制二元三维高斯分布图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> mpl_toolkits.mplot3d</span><br><span class="line"></span><br><span class="line">x, y = np.mgrid[-<span class="number">2</span>:<span class="number">2</span>:<span class="number">200j</span>, -<span class="number">2</span>:<span class="number">2</span>:<span class="number">200j</span>]</span><br><span class="line">z = (<span class="number">1</span> / <span class="number">2</span> * math.pi * <span class="number">3</span> ** <span class="number">2</span>) * np.exp(-(x ** <span class="number">2</span> + y ** <span class="number">2</span>) / <span class="number">2</span> * <span class="number">3</span> ** <span class="number">2</span>)</span><br><span class="line">ax = plt.subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.plot_surface(x, y, z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=<span class="string">&#x27;rainbow&#x27;</span>, alpha=<span class="number">0.9</span>)</span><br><span class="line"><span class="comment"># 绘面</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/10" alt="image-20220103200150704"></p><h2 id="冗余部分"><a href="#冗余部分" class="headerlink" title="冗余部分"></a>冗余部分</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.legend(<span class="string">&quot;upper right&quot;</span>) <span class="comment"># 将标签放在右上角</span></span><br></pre></td></tr></table></figure><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">&quot;这是一个标题&quot;</span>) <span class="comment"># 标题 </span></span><br></pre></td></tr></table></figure><h3 id="特殊点标记"><a href="#特殊点标记" class="headerlink" title="特殊点标记"></a>特殊点标记</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特殊点标记</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">1000</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, linestyle=<span class="string">&#x27;-&#x27;</span>, linewidth=<span class="number">2</span>, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;y=sin(x)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># annotate注释分为两类</span></span><br><span class="line"><span class="comment"># 一类为指向性文本注释：r内容、xy坐标位置、xytext注释的坐标位置、arrowprops设置箭头参数、connectionstyle设置箭头形状、bbox为文本添加边框</span></span><br><span class="line"><span class="comment"># 一类为无指向性注释：text(x,y,s,family,fontsize,style,color)</span></span><br><span class="line"></span><br><span class="line">plt.annotate(</span><br><span class="line">    <span class="string">r&#x27;$I\&#x27;m here$&#x27;</span>,</span><br><span class="line">    xy=(np.pi, <span class="number">0</span>),</span><br><span class="line">    xytext=(np.pi, <span class="number">1</span>),</span><br><span class="line">    arrowprops=<span class="built_in">dict</span>(</span><br><span class="line">        arrowstyle=<span class="string">&#x27;-|&gt;&#x27;</span>,  <span class="comment"># 定义箭头样式</span></span><br><span class="line">        connectionstyle=<span class="string">&#x27;arc3&#x27;</span>,  <span class="comment"># 定义连接线的样式</span></span><br><span class="line">        color=<span class="string">&#x27;red&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/2" alt="image-20220103184338684"></p><h3 id="figure上创建多个子图"><a href="#figure上创建多个子图" class="headerlink" title="figure上创建多个子图"></a>figure上创建多个子图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在figure上创建多个子图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.arange(l,r,step) 从l到r生成步长为step的值</span></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0.1</span>)</span><br><span class="line">y1 = x</span><br><span class="line">y2 = -x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个子图</span></span><br><span class="line">fig1 = plt.figure(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 第一个子图位于两行一列的第一行</span></span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(x, y1)</span><br><span class="line"><span class="comment"># 第二个子图位于两行一列的第二行</span></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/3" alt="image-20220103185059168"></p><h2 id="实践内容"><a href="#实践内容" class="headerlink" title="实践内容"></a>实践内容</h2><ol><li>作出（0，2PI）正、余弦曲线，并在正余弦曲线的x = 2/3Pi点处添加标记，标记内容为该点的函数值，添加标题、图例。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作出（0，2PI）正、余弦曲线，并在正余弦曲线的x = 2/3Pi点处添加标记，标记内容为该点的函数值，添加标题、图例。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">1000</span>)</span><br><span class="line">y_sin = np.sin(x)</span><br><span class="line">y_cos = np.cos(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 sinX  绘制cosX</span></span><br><span class="line">mp.plot(x, y_sin, linestyle=<span class="string">&quot;:&quot;</span>, linewidth=<span class="number">2</span>, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>, <span class="number">1.0</span>), label=<span class="string">&quot;y=sin(x)&quot;</span>)</span><br><span class="line">mp.plot(x, y_cos, linestyle=<span class="string">&quot;-.&quot;</span>, linewidth=<span class="number">3</span>, color=<span class="string">&quot;r&quot;</span>, label=<span class="string">&quot;y=cos(x)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴 显示区域</span></span><br><span class="line">mp.xlim(<span class="number">0</span>, <span class="number">2</span> * np.pi)</span><br><span class="line">mp.ylim(-<span class="number">1.2</span>, <span class="number">1.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴 刻度</span></span><br><span class="line">mp.xticks([<span class="number">0</span>, np.pi / <span class="number">2</span>, np.pi, <span class="number">3</span> * np.pi / <span class="number">2</span>, <span class="number">2</span> * np.pi],</span><br><span class="line">          [<span class="string">&quot;0&quot;</span>, <span class="string">r&quot;$\frac&#123;\pi&#125;&#123;2&#125;$&quot;</span>, <span class="string">r&quot;$\pi$&quot;</span>, <span class="string">r&quot;$\frac&#123;3\pi&#125;&#123;2&#125;$&quot;</span>, <span class="string">r&quot;$2\pi$&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标轴 控制与移动</span></span><br><span class="line">ax = mp.gca()</span><br><span class="line">ax.spines[<span class="string">&quot;top&quot;</span>].set_color(<span class="string">&quot;none&quot;</span>)</span><br><span class="line">ax.spines[<span class="string">&quot;right&quot;</span>].set_color(<span class="string">&quot;none&quot;</span>)</span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;data&quot;</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊点编写</span></span><br><span class="line">pointX = [<span class="number">3</span>*np.pi/<span class="number">2</span>]</span><br><span class="line">pointy = [<span class="number">0</span>]</span><br><span class="line">mp.scatter(pointX, pointy, marker=<span class="string">&#x27;o&#x27;</span>, s=<span class="number">70</span>, label=<span class="string">&quot;sample point&quot;</span>, zorder=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例</span></span><br><span class="line">mp.legend(loc=<span class="string">&quot;upper right&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备注的填写</span></span><br><span class="line">mp.annotate(</span><br><span class="line">    <span class="string">r&#x27;$\pi$&#x27;</span>,  <span class="comment"># 备注中显示的文本内容</span></span><br><span class="line">    xycoords=<span class="string">&#x27;data&#x27;</span>,  <span class="comment"># 备注目标点所使用的坐标系（data表示数据坐标系）</span></span><br><span class="line">    <span class="comment"># xy=(np.pi, -1),  # 备注目标点的坐标</span></span><br><span class="line">    xy=(<span class="number">3</span>*np.pi/<span class="number">2</span>, <span class="number">0</span>),  <span class="comment"># 备注目标点的坐标</span></span><br><span class="line">    textcoords=<span class="string">&#x27;offset points&#x27;</span>,  <span class="comment"># 备注文本所使用的坐标系（offset points表示参照点的偏移坐标系）</span></span><br><span class="line">    xytext=(<span class="number">20</span>, -<span class="number">30</span>),  <span class="comment"># 备注文本的坐标</span></span><br><span class="line">    fontsize=<span class="number">14</span>,  <span class="comment"># 备注文本的字体大小</span></span><br><span class="line">    arrowprops=<span class="built_in">dict</span>(</span><br><span class="line">        arrowstyle=<span class="string">&#x27;-|&gt;&#x27;</span>,  <span class="comment"># 定义箭头样式</span></span><br><span class="line">        connectionstyle=<span class="string">&#x27;angle3&#x27;</span>  <span class="comment"># 定义连接线的样式</span></span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">mp.title(<span class="string">&quot;the first picture&quot;</span>)</span><br><span class="line">mp.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>现有鲈鱼和鲑鱼各2000条,每条鱼分别有长度和亮度两维特征。鲈鱼的长度和亮度特征符合正态分布，分别为N(20, 5), N(150, 20), 鲑鱼的长度和亮度特征符合正态分布分别为N(50, 10), N(100,15),分别画出:</p><p>(1)用长度特征代表x轴,亮度特征代表y轴，分别生成鲈鱼和鲑鱼的数据各1000个并画出散点图。(画在同一张图)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">resultx1 = np.random.normal(<span class="number">20</span>, <span class="number">5</span>, <span class="number">2000</span>)  <span class="comment"># 鲈鱼长度</span></span><br><span class="line">resulty1 = np.random.normal(<span class="number">150</span>, <span class="number">20</span>, <span class="number">2000</span>)  <span class="comment"># 鲈鱼亮度</span></span><br><span class="line">resultx2 = np.random.normal(<span class="number">50</span>, <span class="number">10</span>, <span class="number">2000</span>)  <span class="comment"># 鲑鱼长度</span></span><br><span class="line">resulty2 = np.random.normal(<span class="number">100</span>, <span class="number">15</span>, <span class="number">2000</span>)  <span class="comment"># 鲑鱼亮度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(resultx1))</span></span><br><span class="line"></span><br><span class="line">plt.scatter(resultx1, resulty1, s=<span class="number">20</span>, marker=<span class="string">&#x27;*&#x27;</span>, c=<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line">plt.scatter(resultx2, resulty2, s=<span class="number">20</span>, marker=<span class="string">&#x27;.&#x27;</span>, c=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Good test&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;length&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;light&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">200</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(resultx1)</span></span><br><span class="line"><span class="comment"># print(resulty1)</span></span><br><span class="line"><span class="comment"># print(np.mean(result), &quot; &quot;, np.var(result))</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br></pre></td></tr></table></figure><p>(2)鲈鱼、鲑鱼两类特征的高斯曲线图像(两个特征画在同-张图上，并用图例标记)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># N(20,5)</span></span><br><span class="line">miu = <span class="number">20</span></span><br><span class="line">signma = math.sqrt(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">x1 = np.linspace(miu - <span class="number">3</span> * signma, miu + <span class="number">3</span> * signma, <span class="number">2000</span>)</span><br><span class="line">y1 = np.exp(-(x1 - miu) ** <span class="number">2</span> / (<span class="number">2</span> * signma ** <span class="number">2</span>)) / (math.sqrt(<span class="number">2</span> * math.pi) * signma)</span><br><span class="line"></span><br><span class="line"><span class="comment"># N(150,20)</span></span><br><span class="line">miu = <span class="number">150</span></span><br><span class="line">signma = math.sqrt(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">x2 = np.linspace(miu - <span class="number">3</span> * signma, miu + <span class="number">3</span> * signma, <span class="number">2000</span>)</span><br><span class="line">y2 = np.exp(-(x2 - miu) ** <span class="number">2</span> / (<span class="number">2</span> * signma ** <span class="number">2</span>)) / (math.sqrt(<span class="number">2</span> * math.pi) * signma)</span><br><span class="line"></span><br><span class="line">plt.plot(x1, y1, <span class="string">&quot;r-&quot;</span>, linewidth=<span class="number">2</span>, label=<span class="string">&quot;length_luy&quot;</span>)</span><br><span class="line">plt.plot(x2, y2, <span class="string">&quot;r+&quot;</span>, linewidth=<span class="number">2</span>, label=<span class="string">&quot;light_luy&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># N(50,10)</span></span><br><span class="line">miu = <span class="number">50</span></span><br><span class="line">signma = math.sqrt(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">x3 = np.linspace(miu - <span class="number">3</span> * signma, miu + <span class="number">3</span> * signma, <span class="number">2000</span>)</span><br><span class="line">y3 = np.exp(-(x3 - miu) ** <span class="number">2</span> / (<span class="number">2</span> * signma ** <span class="number">2</span>)) / (math.sqrt(<span class="number">2</span> * math.pi) * signma)</span><br><span class="line"></span><br><span class="line"><span class="comment"># N(100,15)</span></span><br><span class="line">miu = <span class="number">100</span></span><br><span class="line">signma = math.sqrt(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">x4 = np.linspace(miu - <span class="number">3</span> * signma, miu + <span class="number">3</span> * signma, <span class="number">2000</span>)</span><br><span class="line">y4 = np.exp(-(x4 - miu) ** <span class="number">2</span> / (<span class="number">2</span> * signma ** <span class="number">2</span>)) / (math.sqrt(<span class="number">2</span> * math.pi) * signma)</span><br><span class="line"></span><br><span class="line">plt.plot(x3, y3, <span class="string">&quot;b-&quot;</span>, linewidth=<span class="number">2</span>, label=<span class="string">&quot;length_guiy&quot;</span>)</span><br><span class="line">plt.plot(x4, y4, <span class="string">&quot;b+&quot;</span>, linewidth=<span class="number">2</span>, label=<span class="string">&quot;light_guiy&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图例</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper right&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3)鲈鱼和鮭鱼的三维高斯函数图像(画在同一-张图上)。</p></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## exp(-((x-u)^2 + (y - u)^2)/(2q^2))</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">resultx1 = np.random.normal(<span class="number">20</span>, <span class="number">5</span>, <span class="number">2000</span>)  <span class="comment"># 鲈鱼长度</span></span><br><span class="line">resulty1 = np.random.normal(<span class="number">150</span>, <span class="number">20</span>, <span class="number">2000</span>)  <span class="comment"># 鲈鱼亮度</span></span><br><span class="line">resultx2 = np.random.normal(<span class="number">50</span>, <span class="number">10</span>, <span class="number">2000</span>)  <span class="comment"># 鲑鱼长度</span></span><br><span class="line">resulty2 = np.random.normal(<span class="number">100</span>, <span class="number">15</span>, <span class="number">2000</span>)  <span class="comment"># 鲑鱼亮度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># luyu</span></span><br><span class="line">R1 = <span class="number">5</span></span><br><span class="line">Z1 = <span class="number">1.0</span> / (math.sqrt(<span class="number">2</span>*np.pi) * R1) * (-((resultx1-<span class="number">20</span>)*(resultx1-<span class="number">20</span>) + (resulty1 - <span class="number">150</span>) * (resulty1 - <span class="number">150</span>))/ (<span class="number">2</span>*R1*R1))</span><br><span class="line">R2 = <span class="number">5</span></span><br><span class="line">Z2 = <span class="number">1.0</span> / (math.sqrt(<span class="number">2</span>*np.pi) * R2) * (-((resultx2-<span class="number">50</span>)*(resultx2-<span class="number">50</span>) + (resulty2 - <span class="number">100</span>) * (resulty2 - <span class="number">100</span>))/ (<span class="number">2</span>*R2*R2))</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">ax.plot_trisurf(resultx1, resulty1, Z1, cmap=cm.coolwarm)</span><br><span class="line">ax.plot_trisurf(resultx2, resulty2, Z2, cmap=cm.rainbow)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/fc6bcf84/11" alt="image-20220103200558288"></p><p><img src="/posts/fc6bcf84/12" alt="image-20220103200630530"></p><p><img src="/posts/fc6bcf84/13" alt="image-20220103200706836"></p><p><img src="/posts/fc6bcf84/14" alt="image-20220103200728658"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;绘制图像的数据是如何存放的—–&amp;gt; numpy包定义了数组和矩阵&lt;/p&gt;
&lt;p&gt;图像又是如何绘制的——–&amp;gt; matplotlib包定义了绘制图像的方式&lt;/p&gt;
&lt;h2 id=&quot;基本内容&quot;&gt;&lt;a href=&quot;#基本内容&quot; class=&quot;headerlink&quot; title=&quot;基本内容&quot;&gt;&lt;/a&gt;基本内容&lt;/h2&gt;&lt;p&gt;使用Python画图绘制折线图、散点图、直方图、饼图、三维空间曲线、曲面图等。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://wxm.fit/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="实践一" scheme="http://wxm.fit/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E8%B7%B5%E4%B8%80/"/>
    
    
    <category term="Python" scheme="http://wxm.fit/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://wxm.fit/posts/ff05b5bf/"/>
    <id>http://wxm.fit/posts/ff05b5bf/</id>
    <published>2022-01-02T14:37:33.000Z</published>
    <updated>2022-01-12T06:29:44.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Welcome&quot;&gt;&lt;a href=&quot;#Welcome&quot; class=&quot;headerlink&quot; title=&quot;Welcome&quot;&gt;&lt;/a&gt;Welcome&lt;/h1&gt;</summary>
      
    
    
    
    
    <category term="Life" scheme="http://wxm.fit/tags/Life/"/>
    
  </entry>
  
</feed>
